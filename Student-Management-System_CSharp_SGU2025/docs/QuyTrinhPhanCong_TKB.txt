QUY TRÌNH XÂY DỰNG & TRIỂN KHAI
0) Phạm vi & Nguyên tắc

Hệ WinForms 3 lớp (DAO–BUS–GUI), MySQL.

Không thay đổi cấu trúc bảng cũ; chỉ bổ sung chỉ mục duy nhất để enforce “hard constraints”.

Phòng học: mặc định theo lớp (không quản lý phòng riêng trong TKB).

Timeslot: Tiết 1..10 (Sáng ~ 1..5, Chiều ~ 6..10). Học Thứ 2..6.

“Phân công” và “TKB” đều có Form Preview ⇒ sửa tay ⇒ Chốt & Lưu (sau khi chốt, không đổi nữa).

1) Chuẩn bị dữ liệu đầu vào

Khóa học kỳ cũ (logic ứng dụng), tạo bản làm việc cho Học kỳ mới (Draft trong ứng dụng).

Đảm bảo đã có:

Danh mục Môn học (số tiết/tuần theo lớp/môn).

Lớp (gắn sẵn “phòng của lớp” nếu cần hiển thị).

Giáo viên (+ tổ/nhóm chuyên môn, các môn có thể dạy).

Phân công giảng dạy (nếu có sẵn, sẽ dùng làm seed; nếu chưa, sẽ autogen ở bước 3).

Thiết lập tham số hệ thống (hằng số trong code, không lưu DB):

DAYS = {2,3,4,5,6} (T2..T6)

PERIODS = 1..10

(Tuỳ UI) hiển thị nhãn: Sáng=1..5, Chiều=6..10.

2) Cập nhật Database (chỉ thêm chỉ mục duy nhất)

Không phá vỡ liên kết cũ. Dùng đúng tên cột của bạn.

-- Lớp không thể có 2 môn trùng (Học kỳ, Thứ, Tiết)
CREATE UNIQUE INDEX ux_tkb_lop
ON ThoiKhoaBieu (MaHocKy, ThuTrongTuan, Tiet, MaLop);

-- Giáo viên không thể dạy 2 lớp trùng (Học kỳ, Thứ, Tiết)
CREATE UNIQUE INDEX ux_tkb_gv
ON ThoiKhoaBieu (MaHocKy, ThuTrongTuan, Tiet, MaGiaoVien);

-- (Tuỳ có MaPhong thì bật)
-- CREATE UNIQUE INDEX ux_tkb_phong
-- ON ThoiKhoaBieu (MaHocKy, ThuTrongTuan, Tiet, MaPhong);


Ý nghĩa: Mọi thao tác kéo-thả vi phạm cứng sẽ bị DB từ chối ⇒ bắt lỗi và highlight ngay trên UI.

3) Phân công giảng dạy (Auto + Preview + Sửa tay)
3.1 Mục tiêu

Gán mỗi (Lớp, Môn) cho 1 GV phù hợp (đúng chuyên môn/phạm vi dạy).

Ưu tiên GVCN dạy lớp mình nếu GVCN có thể dạy môn đó.

Không giới hạn số tiết/tuần của GV (theo yêu cầu bạn).

Cho phép kéo-thả GV giữa các ô trong preview. Khi chốt thì ghi vào PhanCongGiangDay.

3.2 Heuristic gợi ý (đơn giản, hiệu quả)

Input: danh sách lớp, môn, tập GV có thể dạy môn.

Bước 1: Nếu lớp có GVCN và GVCN có thể dạy môn → gán GVCN.

Bước 2: Với các (Lớp,Môn) còn trống → chọn GV có:

match chuyên môn,

“tải dạy hiện có” thấp hơn (cân bằng nhẹ, nếu muốn),

nếu bằng nhau thì ưu tiên GV dạy lớp đó kỳ trước (nếu có dữ liệu).

Bước 3: UI Preview cho phép đổi GV (drag & drop). BUS kiểm tính hợp lệ tối thiểu (có thể dạy môn?).

3.3 Pseudocode (BUS)
AssignmentSuggestion GenerateSuggestion(int maHocKy) {
    foreach (var lop in dsLop) {
        foreach (var mon in dsMonTheoLop(lop)) {
            var candidates = dsGVCoTheDay(mon);

            // Ưu tiên GVCN
            var gvcn = GetGVCN(lop);
            if (gvcn != null && candidates.Contains(gvcn)) {
                assign(lop, mon, gvcn);
                continue;
            }

            // Chọn GV theo heuristic cân bằng
            var gv = PickByMinLoadWithTiebreak(candidates, lop, mon, maHocKyPrev);
            assign(lop, mon, gv);
        }
    }
    return buildSuggestion();
}

3.4 Xác nhận & Lưu

Nút Validate: kiểm tra mỗi (Lớp,Môn) đã có 1 GV.

Nút Lưu (Save): ghi vào PhanCongGiangDay (DAO cũ, thêm hàm upsert nếu cần).

4) Lập TKB (Auto + Tabu Search + Preview + Sửa tay + Chốt)
4.1 Đầu vào

PhanCongGiangDay đã được duyệt (sau bước 3).

Tham số cứng: ngày (T2..T6), tiết 1..10.

4.2 Ràng buộc cứng (hard)

(Lớp, Thứ, Tiết) duy nhất.

(GV, Thứ, Tiết) duy nhất.

Mỗi (Lớp, Môn) phải đủ số tiết/tuần đã quy định.

(Tuỳ) Nếu có MaPhong: (Phòng, Thứ, Tiết) duy nhất.

4.3 Ràng buộc mềm (soft) – tối ưu đẹp (tuỳ thời gian)

Trải đều môn trong tuần (tránh dồn 1 ngày).

Hạn chế “tiết lẻ” (tiết cô đơn kẹp giữa khoảng trống).

Giảm tiết 1/tiết 10 nếu muốn.

Cân đối lịch dạy GV (không bắt buộc theo yêu cầu, nhưng vẫn có thể tính điểm).

4.4 Biểu diễn nghiệm & seed ban đầu

Nghiệm = ma trận (Thu 2..6 × Tiết 1..10 × Lớp) → {Môn, GV}.

Seed:

Cách nhanh: phân phối lần lượt số tiết/tuần của từng (Lớp,Môn) vào các slot trống theo thứ tự, bỏ qua soft.

(Nếu có TKB kỳ trước) có thể dùng để gợi ý phân bố tương tự.

4.5 Toán tử lân cận (Neighborhood)

Swap-2: hoán đổi 2 ô cùng lớp ở 2 slot khác nhau.

Move-1: dời 1 ô (Lớp,Mon,GV) sang slot trống hợp lệ.

Swap-cross: hoán đổi giữa 2 lớp nếu không vi phạm cứng.

Mọi move phải giữ hard constraints; nếu vi phạm thì bỏ qua.

4.6 Hàm điểm (Score)

Score = w1*SpreadPenalty + w2*LonelyPeriodPenalty + w3*EdgesPenalty + w4*GvBalancePenalty ...

Mục tiêu minimize Score. Trọng số w* đặt trong code (const), không cần bảng config.

4.7 Tabu Search (cốt lõi)

Tabu list: lưu các move (ví dụ “(Lớp, Thu, Tiết) ↔ (Thu’,Tiết’)”) với tabu tenure (5–15 bước).

Aspiration: cho phép move tabu nếu cải thiện bestScore.

Delta evaluation: chỉ tính lại điểm cho khu vực bị ảnh hưởng (nhanh).

Stopping: số vòng lặp cố định (ví dụ 2000–5000) hoặc dừng khi không cải thiện sau N vòng.

Pseudocode (BUS Engine)
Solution s = Seed();
int bestScore = Evaluate(s);
Solution best = s;
TabuList tabu = new TabuList(capacity: 200);

for (int iter=1; iter<=MAX_ITERS; iter++) {
    Move bestMove = null;
    int bestDelta = +INF;

    foreach (var mv in GenerateNeighborhood(s)) {
        if (!IsHardFeasible(s, mv)) continue;

        int delta = EvaluateDelta(s, mv); // chỉ khu vực liên quan
        bool isTabu = tabu.Contains(mv);

        if (isTabu && !Aspiration(delta, bestScore)) continue;
        if (delta < bestDelta) { bestDelta = delta; bestMove = mv; }
    }

    if (bestMove == null) break;

    ApplyMove(s, bestMove);
    tabu.Add(bestMove, tenure: Random(7, 15));

    int currentScore = bestScore + bestDelta;
    if (currentScore < bestScore) {
        bestScore = currentScore;
        best = s.Clone();
    }
}

return best;

4.8 Preview & Chỉnh tay

Form TKB hiển thị lưới: cột = T2..T6, hàng = Tiết 1..10 (lọc theo Lớp / theo GV).

Drag&drop để đổi chỗ tiết trong draft:

Gọi TryMove(thu, tiet, lop, mon, gv) → nếu vi phạm hard, báo lỗi/tooltip và không áp dụng.

Nút Re-run Improve: cho phép chạy lại Tabu cục bộ (tuỳ chọn) trên một dải (ví dụ “Khối 10 – Thứ 3”).

4.9 Chốt & Lưu

Nút Validate: kiểm đủ tiết/tuần cho mọi (Lớp,Môn), không vi phạm hard.

Nút Publish/Save: ghi vào ThoiKhoaBieu (xóa draft, insert bản chốt).

Sau khi chốt: khóa form (không cho sửa nữa).

5) Kiến trúc lớp (DAO–BUS–GUI)
5.1 DAO (giữ lớp cũ, chỉ thêm hàm)

PhanCongGiangDayDAO

GetByHocKy(maHocKy)

Upsert(lop, mon, gv)

ThoiKhoaBieuDAO

ExistsLop(maHocKy, thu, tiet, maLop)

ExistsGV(maHocKy, thu, tiet, maGiaoVien)

InsertRow(maHocKy, thu, tiet, maLop, maMon, maGiaoVien)

BulkReplace(maHocKy, rows) (ghi bản chốt)

(Tuỳ) DanhMucDAO: lớp, môn, giáo viên, chuyên môn…

5.2 BUS/Service (interfaces đề xuất)
public interface IAssignmentService {
    AssignmentSuggestion GenerateSuggestion(int maHocKy);
    bool ApplyManualChange(string maLop, string maMon, string maGiaoVien);
    ValidationResult Validate();  // mỗi (Lop,Mon) có đúng 1 GV
    void Save(int maHocKy);
}

public interface ITimetableService {
    TimetableDraft AutoGenerate(int maHocKy);  // seed + tabu
    MoveResult TryMove(int maHocKy, int thu, int tiet, string maLop, string maMon, string maGiaoVien);
    ValidationResult ValidateHard(int maHocKy); // lớp/GV trùng? đủ tiết/tuần?
    void Publish(int maHocKy); // ghi ThoiKhoaBieu (bản chốt)
}

6) Luồng màn hình (GUI WinForms)
6.1 Form Phân công

Lưới (Lớp × Môn) → cell là GV.

Nút: Auto-gợi ý, Validate, Lưu.

Kéo-thả GV giữa các ô; BUS kiểm tra “GV có dạy được môn?”.

6.2 Form TKB

Tab 1: xem theo Lớp; Tab 2: xem theo GV (cùng lưới T2..T6 × Tiết 1..10).

Nút: Auto-generate (Tabu), Try Improve (cục bộ), Validate, Chốt & Lưu.

Kéo-thả cell:

Gọi TryMove → nếu DB/index báo trùng, hiển thị tooltip Lỗi trùng lớp/GV.

Cả hai form nên có: Undo/Redo (stack thao tác trong UI), status bar cho số vi phạm mềm, số ô trống, thời gian chạy engine.

7) Kiểm thử & Tiêu chí nghiệm thu

Bộ dữ liệu thử: 15 lớp × 13 môn × 60 GV, phân phối tiết thực tế THPT.

Kịch bản:

Tự động phân công → không để trống (Lớp,Môn).

Tự động TKB → 0 lỗi hard, đủ tổng tiết/tuần.

Kéo-thả 1 tiết trùng lớp → DB chặn (duplicate key) → UI báo lỗi.

Kéo-thả 1 tiết trùng GV → DB chặn → UI báo lỗi.

Validate trước Publish: báo đúng các môn thiếu/dư tiết.

Hiệu năng: Tabu dừng trong thời gian hợp lý (tuỳ máy; có thể cấu hình MAX_ITERS, TENURE).

8) Kế hoạch triển khai (Sprints)

Sprint 1: Thêm chỉ mục DB (#2). Hoàn thiện DAO hỗ trợ Exists/Upsert/BulkReplace.

Sprint 2: Form Phân công + AssignmentService (Auto + Preview + Save).

Sprint 3: TimetableService (Seed + Tabu + TryMove + Validate) + Form TKB.

Sprint 4: Chốt & Lưu, Export/Print theo Lớp/GV, Undo/Redo, tối ưu UX.

Sprint 5: Tinh chỉnh heuristics/weights, test dữ liệu lớn, dọn mã & docs.

9) Đoạn mẫu kiểm tra move (BUS → DAO)
public MoveResult TryMove(int maHocKy, int thu, int tiet,
                          string maLop, string maMon, string maGiaoVien)
{
    // 1) Lớp có tiết khác ở vị trí này?
    if (tkbDao.ExistsLop(maHocKy, thu, tiet, maLop))
        return MoveResult.Fail("Lớp đã có tiết tại vị trí này.");

    // 2) GV có dạy tiết này ở lớp khác?
    if (tkbDao.ExistsGV(maHocKy, thu, tiet, maGiaoVien))
        return MoveResult.Fail("Giáo viên bận tại tiết này.");

    // 3) (Tuỳ) Kiểm đủ/thiếu số tiết của môn cho lớp trong tuần
    if (!assignmentService.CanAddMorePeriod(maLop, maMon))
        return MoveResult.Fail("Môn đã đủ số tiết/tuần.");

    // 4) Ghi vào draft (bộ nhớ) hoặc bảng tạm; khi Publish sẽ bulk replace
    tkbDraft.AddOrReplace(maHocKy, thu, tiet, maLop, maMon, maGiaoVien);
    return MoveResult.Ok();
}

10) Xuất báo cáo

Theo Lớp: T2..T6 × Tiết 1..10, nội dung: Môn – GV (phòng lấy theo lớp).

Theo GV: T2..T6 × Tiết 1..10, nội dung: Môn – Lớp.

Xuất PDF/Excel; tuỳ chọn lọc theo Khối/Lớp/Học kỳ.